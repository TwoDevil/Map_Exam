DROP TABLE WAYPOINT;
DROP TABLE REPORTS;
DROP TABLE COMMENTS;
DROP TABLE ROAT;
DROP TABLE LIKES;
DROP TABLE USERS;

CREATE TABLE USERS(
Id number(10) NOT NULL PRIMARY KEY, 
Full_Name nvarchar2(50) NOT NULL,
Login nvarchar2(50) NOT NULL,
Password nvarchar2(50) NOT NULL,
Status nvarchar2(10)
);

  INSERT INTO Users(Full_Name,Login,Password,Status) VALUES('Dimas','Diman','1111','user');
  INSERT INTO Users(Full_Name,Login,Password,Status) VALUES('Oleg','Sheun','1111','user');
  
INSERT INTO Country(Name_Country) VALUES('France');
INSERT INTO Country(Name_Country) VALUES('Ukraine');
CREATE TABLE Country(
Id number(10) NOT NULL PRIMARY KEY, 
Name_Country nvarchar2(50) NOT NULL
);

INSERT INTO Cities(Name_city,Id_Country) VALUES('Paris',1);
INSERT INTO Cities(Name_city,Id_Country) VALUES('Odessa',2);
CREATE TABLE Cities(
Id number(10) NOT NULL PRIMARY KEY, 
Name_city nvarchar2(50) NOT NULL,
Id_Country number(10) NOT NULL,
CONSTRAINT FK_Cities_Country FOREIGN KEY (id_Country) REFERENCES Country(Id) 
);


INSERT INTO Waypoint(Id_roat,Name,Coordinates,Description,Image) VALUES(4,'Test','11,11','Test','test.png');
CREATE TABLE Waypoint(
Id number(10) NOT NULL PRIMARY KEY, 
id_Roat number(10) NOT NULL,
Name nvarchar2(50),
Coordinates nvarchar2(50) NOT NULL,
Description nvarchar2(50),
Image nvarchar2(50),
CONSTRAINT FK_Waypoint_Roat FOREIGN KEY (id_Roat) REFERENCES Roat(Id) 
);

INSERT INTO Roat(Id_User,Name,Id_Country,Id_City,Duration_Day) VALUES(1,'TestRoat', 1,21,5);

CREATE TABLE Roat(
Id number(10) NOT NULL PRIMARY KEY, 
Id_User number(10) NOT NULL,
Name nvarchar2(50) NOT NULL,
Id_Country number(10) NOT NULL,
Id_City number(10) NOT NULL,
Duration_Day number NOT NULL,
Type nvarchar2(10),
Description nvarchar2(50),
CONSTRAINT FK_Roat FOREIGN KEY (Id_User) REFERENCES Users(Id),
CONSTRAINT FK_Roat_Country FOREIGN KEY (Id_Country) REFERENCES Country(Id),
CONSTRAINT FK_Roat_City FOREIGN KEY (Id_City) REFERENCES Cities(Id)
);

INSERT INTO Comments(Id_User,Id_Roat,Description)VALUES(1,4,'Test Description');
CREATE TABLE Comments(
Id number(10) NOT NULL PRIMARY KEY, 
Id_User number(10) NOT NULL,
Id_Roat number(10) NOT NULL,
Description nvarchar2(100) NOT NULL,
CONSTRAINT FK_Comments_Id_User FOREIGN KEY (Id_User) REFERENCES Users(Id),
CONSTRAINT FK_Comments_Id_Roat FOREIGN KEY (Id_Roat) REFERENCES Roat(Id)
);

INSERT INTO Likes(Id_User,Id_Roat,Likes)VALUES(1,4,1);
create table Likes(
Id number(10) NOT NULL PRIMARY KEY, 
Id_User number(10) NOT NULL,
Id_Roat number(10) NOT NULL,
Likes number NOT NULL,
CONSTRAINT FK_Likes_Id_User FOREIGN KEY (Id_User) REFERENCES Users(Id),
CONSTRAINT FK_Likes_Id_Roat FOREIGN KEY (Id_Roat) REFERENCES Roat(Id)
);
INSERT INTO Reports(Id_User,Id_Roat,Description)VALUES(1,4,'Test Description reports');
CREATE TABLE Reports(
Id number(10) NOT NULL PRIMARY KEY, 
Id_User number(10) NOT NULL,
Id_User_Moderator number(10),
Id_Roat number(10) NOT NULL,
Description nvarchar2(100) NOT NULL,
CONSTRAINT FK_Reports_Id_User FOREIGN KEY (Id_User) REFERENCES Users(Id),
CONSTRAINT FK_Reports_Id_Roat FOREIGN KEY (Id_Roat) REFERENCES Roat(Id),
CONSTRAINT FK_Reports_Id_User_Moderator FOREIGN KEY (Id_User_Moderator) REFERENCES Users(Id)
)

CREATE SEQUENCE New_User_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;

CREATE SEQUENCE New_City_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
  CREATE SEQUENCE New_Country_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
  CREATE SEQUENCE New_Comments_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;  
  
CREATE SEQUENCE New_Reports_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;  
  
CREATE SEQUENCE New_Roat_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;  
  
  CREATE SEQUENCE New_Likes_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;  
  
  CREATE SEQUENCE New_Waypoint_Sequence
  MINVALUE 1
  MAXVALUE 9999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;  
  
  
  CREATE OR REPLACE TRIGGER Triger_Insert_Cities
   BEFORE INSERT ON Cities
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_City_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;

CREATE OR REPLACE TRIGGER Triger_Insert_Country
   BEFORE INSERT ON Country
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_Country_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;
  
 CREATE OR REPLACE TRIGGER Triger_Insert_User
   BEFORE INSERT ON Users
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_User_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;

 CREATE OR REPLACE TRIGGER Triger_Insert_Comments
   BEFORE INSERT ON Comments
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_Comments_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;

 CREATE OR REPLACE TRIGGER Triger_Insert_Likes
   BEFORE INSERT ON Likes
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_Likes_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;


 CREATE OR REPLACE TRIGGER Triger_Insert_Reports
   BEFORE INSERT ON Reports
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_Reports_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;

 CREATE OR REPLACE TRIGGER Triger_Insert_Roat
   BEFORE INSERT ON Roat
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_Roat_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;


 CREATE OR REPLACE TRIGGER Triger_Insert_Waypoint
   BEFORE INSERT ON WayPoint
   FOR EACH ROW
   WHEN (NEW.ID IS NULL)
BEGIN
   SELECT New_Waypoint_Sequence.NEXTVAL INTO :NEW.id FROM DUAL;
END;

CREATE or REPLACE FUNCTION get_user(user_login IN NVARCHAR2,user_password in NVARCHAR2) 
   RETURN NUMBER 
   IS acc_ NUMBER;
   BEGIN 
   acc_:=0;
      SELECT ID
      INTO acc_ 
      FROM Users 
      WHERE Login =user_login and Password=user_password; 
      RETURN(acc_);
      EXCEPTION 
      WHEN OTHERS THEN 
      RETURN(0);
    end;
    
   CREATE or REPLACE FUNCTION get_user_like(user_id IN NUMBER,roat_id IN NUMBER) 
   RETURN NUMBER 
   IS acc_ NUMBER;
   BEGIN 
      SELECT ID
      INTO acc_ 
      FROM Likes 
      WHERE ID_USER =user_id and ID_ROAT=roat_id; 
      RETURN(acc_);
      EXCEPTION 
      WHEN OTHERS THEN 
      INSERT INTO Likes(ID_USER,ID_ROAT,LIKES) VALUES(user_id,roat_id,0);
      RETURN(0);
    END;
    
    CREATE or REPLACE FUNCTION get_user_login(user_login IN NVARCHAR2) 
   RETURN NUMBER 
   IS acc_ NUMBER;
   BEGIN 
   acc_:=0;
      SELECT ID
      INTO acc_ 
      FROM Users 
      WHERE Login =user_login; 
      RETURN(acc_);
      EXCEPTION 
      WHEN OTHERS THEN 
      RETURN(0);
    end;
    
    
  Select * FROM Users;
  

  
  
  
  SET SERVEROUTPUT ON;
  
  BEGIN
  DBMS_OUTPUT.PUT_LINE(get_user('Diman','1111'));
  end;
